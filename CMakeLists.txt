cmake_minimum_required (VERSION 3.0)

#set( CMAKE_VERBOSE_MAKEFILE on )

project(PolyVR)

message( "Configuring for system name / version: " ${CMAKE_SYSTEM_NAME} " / " ${CMAKE_SYSTEM_VERSION} )

  
if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
	# debugging flags:
	#  -g -s ASSERTIONS=1

	#set(LINKER_FLAGS "${LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1 -s EXIT_RUNTIME=1 -s DISABLE_EXCEPTION_CATCHING=0 -g")
	set(LINKER_FLAGS "${LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1 -s EXIT_RUNTIME=1 -s DISABLE_EXCEPTION_CATCHING=0")

	add_definitions( -DWASM=1 )
	add_definitions( -DGLUT_glut_LIBRARY=1 )
	add_definitions( -DGLUT_Xi_LIBRARY=1 )
	add_definitions( -DGLUT_Xmu_LIBRARY=1 )
	add_definitions( -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake )
	add_definitions( -DCMAKE_MODULE_PATH=../emsdk/upstream/emscripten/cmake/Modules )
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
	add_definitions( -DWIN32_LEAN_AND_MEAN=1 )
endif()

add_definitions( -D__USE_MISC=1 )

set(INCLUDE_DIRS "")
set(LIB_DIRS "")

function(FIND_ZLIB)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "~/.emscripten_ports/zlib/zlib-version_1" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "~/.emscripten_cache/wasm-obj/" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lz" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/libs/zlib" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "C:/libs/zlib" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} zlib PARENT_SCOPE)
	endif()
endfunction()

function(FIND_LIBXML)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include/libxml2" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lxml2" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/usr/include/libxml2" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "C:/usr/lib" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} libxml2 PARENT_SCOPE)
	endif()
endfunction()

function(FIND_BOOST)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "~/.emscripten_ports/boost_headers" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lboost_system -lboost_program_options -lboost_serialization -lboost_filesystem" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/libs/boost" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "C:/libs/boost/lib64-msvc-14.1" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} boost_system-vc141-mt-1_65_1 libboost_program_options-vc141-mt-1_65_1 boost_serialization-vc141-mt-1_65_1 boost_filesystem-vc141-mt-1_65_1 PARENT_SCOPE)
	endif()
endfunction()

function(FIND_FREETYPE)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "~/.emscripten_ports/freetype/FreeType-version_1/include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "~/.emscripten_cache/wasm-obj/" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lfreetype" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/usr/include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "C:/usr/lib" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} freetype PARENT_SCOPE)
	endif()
endfunction()

function(FIND_PYTHON)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include/Python" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lpython2.7" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/usr/include/Python" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "C:/usr/lib" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} python27 PARENT_SCOPE)
	endif()
endfunction()

function(FIND_GLUT)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten") # GLUT is wrapped for web assembly
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/libs/freeglut" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "C:/libs/freeglut" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} freeglut PARENT_SCOPE)
	endif()
endfunction()

function(FIND_OPENSG)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lOSGWindowGLUT -lOSGWindowWASM -lOSGWindow -lOSGSystem -lOSGUtil -lOSGDrawable -lOSGGroup -lOSGState -lOSGBase -lOSGFileIO -lOSGImageFileIO" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/libs/opensg/include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "C:/libs/opensg" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} OSGBase OSGContribTrapezoidalShadowMaps OSGCluster OSGDrawable OSGEffectGroups OSGGroup OSGImageFileIO OSGState OSGSystem OSGUtil OSGText OSGWindow OSGWindowGLUT PARENT_SCOPE)
	endif()
endfunction()

function(FIND_PNG)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "~/.emscripten_ports/libpng/libpng-version_1" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "~/.emscripten_cache/wasm-obj" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lpng" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		#set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/libs/libpng" PARENT_SCOPE)
		#set(LIB_DIRS ${LIB_DIRS} "C:/libs/libpng" PARENT_SCOPE)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lpng" PARENT_SCOPE)
	endif()
endfunction()

function(FIND_JPG)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "~/.emscripten_ports/libjpeg/jpeg-9c" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "~/.emscripten_cache/wasm-obj" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -ljpeg" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		#set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/libs/libjpeg" PARENT_SCOPE)
		#set(LIB_DIRS ${LIB_DIRS} "C:/libs/libjpeg" PARENT_SCOPE)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -ljpeg" PARENT_SCOPE)
	endif()
endfunction()

function(FIND_GDAL)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lgdal -lproj -ltiff" PARENT_SCOPE)
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		#set(INCLUDE_DIRS ${INCLUDE_DIRS} "C:/libs/gdal" PARENT_SCOPE)
		#set(LIB_DIRS ${LIB_DIRS} "C:/libs/gdal" PARENT_SCOPE)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lgdal -lproj -ltiff" PARENT_SCOPE)
	endif()
endfunction()

function(SETUP_VARS)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		add_definitions( -DOSG_OGL_ES2 )
		add_definitions( -DWITHOUT_BULLET )
		add_definitions( -DWITHOUT_GTK )
		add_definitions( -DWITHOUT_EXECINFO )
		add_definitions( -DWITHOUT_CRYPTOPP )
		add_definitions( -DWITHOUT_VRPN )
		add_definitions( -DWITHOUT_ART )
		add_definitions( -DWITHOUT_AV )
		add_definitions( -DWITHOUT_VTK )
		add_definitions( -DWITHOUT_CEF )
		add_definitions( -DWITHOUT_LAPACKE_BLAS )
		add_definitions( -DWITHOUT_CGAL )
		add_definitions( -DWITHOUT_JSONCPP )
		add_definitions( -DWITHOUT_OPCUA )
		add_definitions( -DWITHOUT_CURL )
		add_definitions( -DWITHOUT_MTOUCH )
		add_definitions( -DWITHOUT_NUMPY )
		add_definitions( -DWITHOUT_SSH )
		add_definitions( -DWITHOUT_RAPTOR )
		add_definitions( -DWITHOUT_QRENCODE )
		add_definitions( -DWITHOUT_COLLADA )
		add_definitions( -DWITHOUT_DWG )
		#add_definitions( -DWITH_STEP )
		#add_definitions( -DWITHOUT_GDAL )
		add_definitions( -DWITHOUT_DEFERRED_RENDERING )
		add_definitions( -DWITHOUT_PANGO_CAIRO )
		add_definitions( -DWITHOUT_UNICODE )
		add_definitions( -DWITHOUT_IES )
		add_definitions( -DWITHOUT_GLU_TESS )
		add_definitions( -DWITHOUT_SHARED_MEMORY )
		add_definitions( -DWITHOUT_HDLC )
		add_definitions( -DWITHOUT_VIVE )
	endif()
	if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
		#add_definitions( -DOSG_OGL_ES2 )
		add_definitions( -DWITHOUT_BULLET )
		add_definitions( -DWITHOUT_GTK )
		add_definitions( -DWITHOUT_EXECINFO )
		add_definitions( -DWITHOUT_CRYPTOPP )
		add_definitions( -DWITHOUT_VRPN )
		add_definitions( -DWITHOUT_ART )
		add_definitions( -DWITHOUT_AV )
		add_definitions( -DWITHOUT_VTK )
		add_definitions( -DWITHOUT_CEF )
		add_definitions( -DWITHOUT_LAPACKE_BLAS )
		add_definitions( -DWITHOUT_CGAL )
		add_definitions( -DWITHOUT_JSONCPP )
		add_definitions( -DWITHOUT_OPCUA )
		add_definitions( -DWITHOUT_CURL )
		add_definitions( -DWITHOUT_MTOUCH )
		add_definitions( -DWITHOUT_NUMPY )
		add_definitions( -DWITHOUT_SSH )
		add_definitions( -DWITHOUT_RAPTOR )
		add_definitions( -DWITHOUT_QRENCODE )
		add_definitions( -DWITHOUT_COLLADA )
		add_definitions( -DWITHOUT_DWG )
		#add_definitions( -DWITH_STEP )
		add_definitions( -DWITHOUT_GDAL )
		add_definitions( -DWITHOUT_DEFERRED_RENDERING )
		add_definitions( -DWITHOUT_PANGO_CAIRO )
		add_definitions( -DWITHOUT_UNICODE )
		add_definitions( -DWITHOUT_IES )
		add_definitions( -DWITHOUT_GLU_TESS )
		add_definitions( -DWITHOUT_SHARED_MEMORY )
		add_definitions( -DWITHOUT_HDLC )
		add_definitions( -DWITHOUT_VIVE )
	endif()
endfunction()

FIND_ZLIB()
FIND_LIBXML()
FIND_FREETYPE()
FIND_BOOST()
FIND_PYTHON()
FIND_GLUT()
FIND_OPENSG()
FIND_PNG()
FIND_JPG()
FIND_GDAL()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

SETUP_VARS()
if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
string(STRIP ${LINKER_FLAGS} LINKER_FLAGS)
endif()

set(INCLUDE_DIRS ${INCLUDE_DIRS} "src")
include_directories(${INCLUDE_DIRS})
link_directories(${LIB_DIRS})

add_executable(polyvr src/main.cpp)
target_sources(polyvr PRIVATE src/PolyVR.cpp)

if(TRUE) # ok
#target_sources(polyvr PRIVATE src/core/math/PCA.cpp) # needs lapacke/blas
target_sources(polyvr PRIVATE src/core/math/VRStateMachine.cpp)
target_sources(polyvr PRIVATE src/core/math/coordinates.cpp)
target_sources(polyvr PRIVATE src/core/math/Octree.cpp)
target_sources(polyvr PRIVATE src/core/math/OSGMathFwd.cpp)
target_sources(polyvr PRIVATE src/core/math/interpolator.cpp)
#target_sources(polyvr PRIVATE src/core/math/triangulator.cpp)
target_sources(polyvr PRIVATE src/core/math/Tsdf.cpp)
target_sources(polyvr PRIVATE src/core/math/equation.cpp)
target_sources(polyvr PRIVATE src/core/math/boundingbox.cpp)
target_sources(polyvr PRIVATE src/core/math/kinematics/VRFABRIK.cpp)
#target_sources(polyvr PRIVATE src/core/math/kinematics/VRKinematics.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/math/kinematics/VRConstraint.cpp)
#target_sources(polyvr PRIVATE src/core/math/VRConvexHull.cpp) # needs cgal
#target_sources(polyvr PRIVATE src/core/math/SingularValueDecomposition.cpp) # needs lapacke/blas
target_sources(polyvr PRIVATE src/core/math/polygon.cpp)
target_sources(polyvr PRIVATE src/core/math/pose.cpp)
target_sources(polyvr PRIVATE src/core/math/frustum.cpp)
target_sources(polyvr PRIVATE src/core/math/Expression.cpp)
#target_sources(polyvr PRIVATE src/core/math/Eigendecomposition.cpp) # needs lapacke/blas
target_sources(polyvr PRIVATE src/core/math/patch.cpp)
target_sources(polyvr PRIVATE src/core/math/path.cpp)
target_sources(polyvr PRIVATE src/core/math/graph.cpp)
target_sources(polyvr PRIVATE src/core/math/datarow.cpp)
target_sources(polyvr PRIVATE src/core/navigation/VRNavigator.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/networking/mongoose/mongoose.c)
#target_sources(polyvr PRIVATE src/core/networking/VRSharedMemory.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRWebSocket.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRMainInterface.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRNetworkManager.cpp)
#target_sources(polyvr PRIVATE src/core/networking/VROPCUA.cpp) # needs OPCUA
target_sources(polyvr PRIVATE src/core/networking/VRSocket.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRProtocol.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRSceneSync.cpp)
#target_sources(polyvr PRIVATE src/core/networking/VRHDLC.cpp) # needs ioctl
#target_sources(polyvr PRIVATE src/core/networking/VRSSH.cpp) # needs libssh2
target_sources(polyvr PRIVATE src/core/networking/VRPing.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/scene/VRObjectGroupManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRThreadManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRScene.cpp)
#target_sources(polyvr PRIVATE src/core/scene/VRPhysicsManager.cpp) # needs bullet
#target_sources(polyvr PRIVATE src/core/scene/import/STEP/VRBRepSurface.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/STEP/VRBRepBound.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/STEP/VRSTEP.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/STEP/VRBRepEdge.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/STEP/VRBRepUtils.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRCOLLADA.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRIFC.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/VRImport.cpp)
if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
	target_sources(polyvr PRIVATE src/core/scene/import/GIS/VRGDAL.cpp) # needs gdal
endif()
target_sources(polyvr PRIVATE src/core/scene/import/VRExport.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRDXF.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRVTK.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRIES.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/VRML.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57Foundation.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57FoundationImpl.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57Simple.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57SimpleImpl.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/LASReader.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/time_conversion.c)
target_sources(polyvr PRIVATE src/core/scene/import/VRPLY.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/GLTF/GLTF.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRSTEPCascade.cpp) # needs OpenCascade
target_sources(polyvr PRIVATE src/core/scene/VRBackground.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRCameraManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRProjectsList.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRSemanticManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRRenderStudio.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRFog.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRDeferredRenderStage.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRSSAO.cpp)
#target_sources(polyvr PRIVATE src/core/scene/rendering/VRDefShading.cpp) # needs compiling def shading in OSG
target_sources(polyvr PRIVATE src/core/scene/rendering/VRFXAA.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRRenderManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRHMDDistortion.cpp)
target_sources(polyvr PRIVATE src/core/scene/interfaces/VRScenegraphInterface.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRMaterialManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRSpaceWarper.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRObjectManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRAnimationManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRSceneLoader.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRCallbackManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRSceneManager.cpp)
#target_sources(polyvr PRIVATE src/core/scene/sound/VRSound.cpp) # needs libav
#target_sources(polyvr PRIVATE src/core/scene/sound/VRSoundUtils.cpp) # needs libav
#target_sources(polyvr PRIVATE src/core/scene/sound/VRSoundManager.cpp) # needs libav
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/scripting/VRPySelection.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyConstructionKit.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyGraph.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRSceneModules.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyBoundingbox.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySelector.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMeasure.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyObject.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyClipPlane.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRSceneGlobals.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyLod.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPointCloud.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyMultiTouch.cpp) # needs mtouch
target_sources(polyvr PRIVATE src/core/scripting/VRPyNamed.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPatchSelection.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySocket.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyWaypoint.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPolygon.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyConstraint.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyCamera.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTextureMosaic.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyJointTool.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyObjectManager.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyColorChooser.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPath.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPySound.cpp) # needs libav
#target_sources(polyvr PRIVATE src/core/scripting/VRPyNetworking.cpp) # needs ioctl
target_sources(polyvr PRIVATE src/core/scripting/VRPySprite.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySky.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPolygonSelection.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyListMath.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMobile.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMenu.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyGeoPrimitive.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMaterial.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyNavPreset.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyGeometry.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTextureRenderer.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyRecorder.cpp) # needs AV
target_sources(polyvr PRIVATE src/core/scripting/VRPyLight.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyAnnotationEngine.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyStateMachine.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyLightBeacon.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMath.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyOPCUA.cpp) # needs OPCUA
target_sources(polyvr PRIVATE src/core/scripting/VRPyPose.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyScenegraphInterface.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySnappingEngine.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyProjectManager.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMouse.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyHaptic.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/scripting/VRPyCodeCompletion.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyBase.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRScriptManager.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyEncryption.cpp) # needs cryptopp
target_sources(polyvr PRIVATE src/core/scripting/VRPyAnalyticGeometry.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPySpatialCollisionManager.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/scripting/VRPyStroke.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRScript.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyUndoManager.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyNavigator.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyAnimation.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPathtool.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyRendering.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyImage.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyBaseFactory.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyProgress.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyTriangulator.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySetup.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTransform.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTypeCaster.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyDevice.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTextureGenerator.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyKinematics.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyIntersection.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/setup/windows/VRWindow.cpp)
target_sources(polyvr PRIVATE src/core/setup/windows/VRView.cpp)
#target_sources(polyvr PRIVATE src/core/setup/windows/VRGtkWindow.cpp) # needs GTK
target_sources(polyvr PRIVATE src/core/setup/windows/VRWindowManager.cpp)
target_sources(polyvr PRIVATE src/core/setup/windows/VRGlutWindow.cpp)
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
target_sources(polyvr PRIVATE src/core/setup/windows/VRMultiWindow.cpp)
endif()
target_sources(polyvr PRIVATE src/core/setup/windows/VRViewManager.cpp)
target_sources(polyvr PRIVATE src/core/setup/VRSetupManager.cpp)
#target_sources(polyvr PRIVATE src/core/setup/tracking/Kinect.cpp) # needs freenect
#target_sources(polyvr PRIVATE src/core/setup/tracking/VRPN.cpp) # needs VRPN
#target_sources(polyvr PRIVATE src/core/setup/tracking/Vive.cpp) # needs VIVE
#target_sources(polyvr PRIVATE src/core/setup/tracking/DTrack.cpp)
#target_sources(polyvr PRIVATE src/core/setup/tracking/ART.cpp)
#target_sources(polyvr PRIVATE src/core/setup/tracking/OptiTrack.cpp)
#target_sources(polyvr PRIVATE src/core/setup/tracking/WinTrackerIII.cpp)
target_sources(polyvr PRIVATE src/core/setup/VRSetup.cpp)
target_sources(polyvr PRIVATE src/core/setup/VRNetwork.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRIntersect.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRAvatar.cpp)
#target_sources(polyvr PRIVATE src/core/setup/devices/virtuose.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRKeyboard.cpp)
#target_sources(polyvr PRIVATE src/core/setup/devices/VRMultiTouch.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRMouse.cpp)
#target_sources(polyvr PRIVATE src/core/setup/devices/VRHaptic.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRSignal.cpp)
#target_sources(polyvr PRIVATE src/core/setup/devices/virtuose/main.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRFlystick.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRServer.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRDevice.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRDeviceManager.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/tools/VRProjectManager.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRWaypoint.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRMesure.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRSnappingEngine.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRClipPlane.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRAnnotationEngine.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRText.cpp) # needs pango cairo
target_sources(polyvr PRIVATE src/core/tools/VRMenu.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRKinematictool.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRPathtool.cpp)
#target_sources(polyvr PRIVATE src/core/tools/VRRecorder.cpp) # needs av
#target_sources(polyvr PRIVATE src/core/tools/VRQRCode.cpp) # needs qrencode
target_sources(polyvr PRIVATE src/core/tools/VRColorChooser.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRConstructionKit.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRGeoPrimitive.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRTextureRenderer.cpp)
target_sources(polyvr PRIVATE src/core/tools/selection/VRPolygonSelection.cpp)
target_sources(polyvr PRIVATE src/core/tools/selection/VRSelection.cpp)
target_sources(polyvr PRIVATE src/core/tools/selection/VRPatchSelection.cpp)
target_sources(polyvr PRIVATE src/core/tools/selection/VRSelector.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRUndoManager.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRAnalyticGeometry.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/objects/geometry/sprite/VRSprite.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/sprite/VRSpriteResizeTool.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/OSGGeometry.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRGeoData.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRGeometry.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRHandle.cpp)
#target_sources(polyvr PRIVATE src/core/objects/geometry/VRPhysics.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/objects/geometry/VRPrimitive.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRSky.cpp)
#target_sources(polyvr PRIVATE src/core/objects/geometry/VRSpatialCollisionManager.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/objects/geometry/VRStroke.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/objects/material/OSGMaterial.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRBricks.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRMaterial.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRNormalmap.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRPerlin.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRShader.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRTexture.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRTextureGenerator.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRTextureMosaic.cpp)
#target_sources(polyvr PRIVATE src/core/objects/material/VRVideo.cpp) # needs libav
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/objects/object/OSGCore.cpp)
target_sources(polyvr PRIVATE src/core/objects/object/VRAttachment.cpp)
target_sources(polyvr PRIVATE src/core/objects/object/VRObject.cpp)
target_sources(polyvr PRIVATE src/core/objects/OSGCamera.cpp)
target_sources(polyvr PRIVATE src/core/objects/OSGObject.cpp)
target_sources(polyvr PRIVATE src/core/objects/OSGTransform.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRAnimation.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRCamera.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRGroup.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRLight.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRLightBeacon.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRLod.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRLodTree.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRPointCloud.cpp)
#target_sources(polyvr PRIVATE src/core/objects/VRShadowEngine.cpp) # to delete
#target_sources(polyvr PRIVATE src/core/objects/VRShadowEngineBase.cpp) # to delete
target_sources(polyvr PRIVATE src/core/objects/VRStage.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRTransform.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/utils/system/VRSystem.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi_buf.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi_mem.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/unzip.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/zip.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/filesystem.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/tools.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/unzipper.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/zipper.cpp)
target_sources(polyvr PRIVATE src/core/utils/coreDumpHandler.cpp)
target_sources(polyvr PRIVATE src/core/utils/isNan.cpp)
target_sources(polyvr PRIVATE src/core/utils/toString.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRCallbackWrapper.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRChangeList.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRDoublebuffer.cpp)
#target_sources(polyvr PRIVATE src/core/utils/VREncryption.cpp) # needs cryptopp
target_sources(polyvr PRIVATE src/core/utils/VRFlags.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRFunction.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRGlobals.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRInternalMonitor.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRLogger.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRManager.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRName.cpp)
target_sources(polyvr PRIVATE src/core/utils/VROptions.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRProfiler.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRProgress.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRRate.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRStorage.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRTests.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRTimer.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRUndoInterface.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRVisualLayer.cpp)
target_sources(polyvr PRIVATE src/core/utils/xml.cpp)
endif()

if(TRUE) # ok
#target_sources(polyvr PRIVATE src/addons/CEF/VRPyWebCam.cpp)
#target_sources(polyvr PRIVATE src/addons/CEF/VRPyCEF.cpp)
#target_sources(polyvr PRIVATE src/addons/CEF/CEF.cpp)
#target_sources(polyvr PRIVATE src/addons/CEF/VRWebCam.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/MapGrid.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/StreetAlgos.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/World.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/MapData.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Config.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/RealWorld.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Vec2Helper.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/MapManager.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/MapCoordinator.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/VRPyRealWorld.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Elevation.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Assets/StreetLamp.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Assets/Asset.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/ModuleStreets.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/StreetJoint.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/Building.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/ModuleTerrain.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/Wall.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/ModuleFloor.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/ModuleTree.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/ModuleBuildings.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/ModuleWalls.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/BaseModule.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/Modules/StreetSegment.cpp)
#target_sources(polyvr PRIVATE src/addons/RealWorld/triangulate.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRBehavior.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRPyCharacter.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRSkeleton.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRCharacter.cpp)
target_sources(polyvr PRIVATE src/addons/CaveKeeper/CaveKeeper.cpp)
target_sources(polyvr PRIVATE src/addons/CaveKeeper/CKOctree.cpp)
target_sources(polyvr PRIVATE src/addons/CaveKeeper/VRPyCaveKeeper.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRNumberingEngine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRProfile.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRPyNumberingEngine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/network.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRLogistics.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRPyAMLLoader.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRPyFactory.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRAMLLoader.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRPyProduction.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRProduction.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRPyLogistics.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRFactory.cpp)
#target_sources(polyvr PRIVATE src/addons/Engineering/CSG/CSGGeometryAlgorithms.cpp)
#target_sources(polyvr PRIVATE src/addons/Engineering/CSG/CSGGeometry.cpp)
#target_sources(polyvr PRIVATE src/addons/Engineering/CSG/csgjs.cpp)
#target_sources(polyvr PRIVATE src/addons/Engineering/CSG/VRPyCSG.cpp)
#target_sources(polyvr PRIVATE src/addons/Engineering/CSG/CsgjsWrapper.cpp)
#target_sources(polyvr PRIVATE src/addons/Engineering/CSG/CSGGeometryBis.cpp)
#target_sources(polyvr PRIVATE src/addons/Engineering/CSG/GTSGeometry.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRPyRobotArm.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRMillingCuttingToolProfile.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRMillingMachine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRMillingWorkPiece.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRPyMillingCuttingToolProfile.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRPyMillingMachine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRPyMillingWorkPiece.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Mechanics/VRPyMechanism.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Mechanics/VRMechanism.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRRobotArm.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Chemistry/VRPyMolecule.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Chemistry/VRMolecule.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Chemistry/VRCrystal.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROntologyRule.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRReasoner.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROWLExport.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROntologyLibrary.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRStatement.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROntologyUtils.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRSemanticUtils.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRPyOntology.cpp)
#target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROWLImport.cpp) # needs raptor
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROntology.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRConcept.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VREntity.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRProperty.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Processes/VRPyProcess.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Processes/VRProcessEngine.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Processes/VRProcessLayout.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Processes/VRProcess.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Segmentation/VRPyAdjacencyGraph.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Segmentation/VRPySegmentation.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Segmentation/VRSegmentation.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Segmentation/VRAdjacencyGraph.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/Particles/VRPyParticles.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/Particles/VREmitter.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/Particles/VRParticles.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/CarDynamics/VRPyCarDynamics.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/CarDynamics/CarDynamics.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/CarDynamics/VRDriver.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/CarDynamics/CarSound/CarSound.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/Fluids/VRMetaBalls.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/Fluids/VRPyFluids.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/Fluids/VRFluids.cpp)
#target_sources(polyvr PRIVATE src/addons/Bullet/SoftBody/SoftBody.cpp)
target_sources(polyvr PRIVATE src/addons/SimViDekont/VRPySimViDekont.cpp)
target_sources(polyvr PRIVATE src/addons/SimViDekont/SimViDekont.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/GIS/GISWorld.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/GIS/OSMMap.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/weather/VRRain.cpp)
#target_sources(polyvr PRIVATE src/addons/WorldGenerator/weather/VRPyRain.cpp) # to delete
target_sources(polyvr PRIVATE src/addons/WorldGenerator/weather/VRRainCarWindshield.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/weather/VRPyWeather.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRGrassPatch.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRTree.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRPyNature.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRNature.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRPlantMaterial.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/VRWorldGenerator.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VRPlanet.cpp)
#target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VRTerrainPhysicsShape.cpp) # needs bullet
target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VRPyTerrain.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VRTerrain.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/VRPyWorldGenerator.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/assets/Asset.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/assets/StreetLamp.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/buildings/VRDistrict.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/buildings/VRBuilding.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/traffic/VRTrafficLights.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/traffic/VRPyTrafficSimulation.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/traffic/VRTrafficSimulation.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRTunnel.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRRoad.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRRoadBase.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRTrafficSigns.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRBridge.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRRoadNetwork.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRRoadIntersection.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRAsphalt.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/VRWorldModule.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRLeap.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRHandGeo.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRPyLeap.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRPyHandGeo.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRLeapFrame.cpp)
target_sources(polyvr PRIVATE src/addons/construction/building/furniture/VRBlinds.cpp)
target_sources(polyvr PRIVATE src/addons/construction/building/VRElectricDevice.cpp)
target_sources(polyvr PRIVATE src/addons/construction/building/VROpening.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRPyPathFinding.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRPyGraphLayout.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRPathFinding.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRGraphLayout.cpp)
endif()

target_compile_options(polyvr PRIVATE ${COMPILER_FLAGS})
target_link_libraries(polyvr PRIVATE ${LINKER_FLAGS})







