<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="sorting" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.387091 0.387091 0.387091 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="directional" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1e+06 1e+06 1e+06 -1e+06 -1e+06 -1e+06 1" specular="0 0 0 1" type="Light" visible="1">
        <Object at="-0.5 -1 -0.3" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <constraint persistency="666"/>
        </Object>
        <Object accept_root="1" aspect="1" at="2.75 1.72391 0.071064" at_dir="0" base_name="Default" far="512" fov="1.0472" from="10.5706 4.47909 3.80579" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('plant')
	VR.find('light').addChild(VR.scene)
	
	VR.semantics_init()
	
	VR.initFloor()
	VR.initPanel()
	VR.initConveyorBelt()
	VR.initBumpers()
	VR.initBins()
	VR.initScanner()
	VR.initPackets()
	
	print VR.ontology.toString()
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="105" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
    <Script base_name="initBins" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	brown = VR.Material('brown')
	brown.setDiffuse(0.5,0.4,0.1)
	
	def makeBin(p):
		bin = VR.CSGGeometry('Bin:bin')
		outer = VR.Geometry('outer')
		inner = VR.Geometry('inner')
		outer.setPrimitive('Box 1 1 1 1 1 1')
		inner.setPrimitive('Box 0.9 1 0.9 1 1 1')
		inner.setFrom([0,0.1,0])
		bin.addChild(outer)
		bin.addChild(inner)
		bin.setOperation('subtract')
		bin.setEditMode(False)
		bin.setFrom(p)
		bin.setMaterial(brown)
		VR.scene.addChild(bin)
	
	makeBin([5,0.5,1.1])
	makeBin([7,0.5,1.1])
	makeBin([9,0.5,1.1])
</core>
    </Script>
    <Script base_name="initBumpers" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	brown = VR.Material('brown')
	brown.setDiffuse(0.5,0.4,0.1)
	gray1 = VR.Material('gray')
	gray1.setDiffuse(0.6,0.6,0.6)
	gray2 = VR.Material('gray')
	gray2.setDiffuse(0.4,0.4,0.4)
	red = VR.Material('red')
	red.setDiffuse(0.9,0.3,0.1)
	
	def makeBumper(p):
		bumper = VR.Transform('Bumper:bumper')
		support = VR.Geometry('support')
		support.setPrimitive('Box 0.4 1.2 0.8 1 1 1')
		support.setMaterial(brown)
		case = VR.Geometry('case')
		case.setPrimitive('Box 0.2 0.2 0.6 1 1 1')
		case.setMaterial(gray2)
		case.setFrom([0,0.7,0])
		rod = VR.Geometry('case')
		rod.setPrimitive('Box 0.1 0.1 0.6 1 1 1')
		rod.setMaterial(gray1)
		rod.setFrom([0,0.7,0.1])
		head = VR.Geometry('case')
		head.setPrimitive('Box 0.4 0.15 0.1 1 1 1')
		head.setMaterial(red)
		head.setFrom([0,0,0.3])
		rod.addChild(head)
		bumper.addChild(rod)
		bumper.addChild(case)
		bumper.addChild(support)
		bumper.setFrom(p)
		VR.scene.addChild(bumper)
	
		lamp = VR.makeLamp()
		lamp.setFrom([0,0.9,-0.2])
		bumper.addChild(lamp)
	
	makeBumper([4.7,0.5,-1.1])
	makeBumper([6.7,0.5,-1.1])
	makeBumper([8.7,0.5,-1.1])
</core>
    </Script>
    <Script base_name="initConveyorBelt" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	gray1 = VR.Material('gray')
	gray1.setDiffuse(0.6,0.6,0.6)
	gray2 = VR.Material('gray')
	gray2.setDiffuse(0.4,0.4,0.4)
	
	belt = VR.Geometry('ConveyorBelt:belt')
	belt.setPrimitive('Box 22 0.2 1 20 1 1')
	belt.setFrom([0,0.9,0])
	belt.setMaterial(gray2)
	VR.scene.addChild(belt)
	
	for i in range(6):
		leg = VR.Geometry('leg')
		leg.setPrimitive('Box 0.2 0.8 0.2 1 1 1')
		leg.setFrom([i*4-10,-0.5,0])
		leg.setMaterial(gray2)
		belt.addChild(leg)
		
	for i in range(109):
		roll = VR.Geometry('roll')
		roll.setPrimitive('Cylinder 0.9 0.1 12 1 1 1')
		roll.setTransform([i*0.2-10.8,0.05,0], [0,-1,0], [0,0,1])
		roll.setMaterial(gray1)
		belt.addChild(roll)
</core>
    </Script>
    <Script base_name="initFloor" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	blue = VR.Material('blue')
	blue.setDiffuse(0.1,0.5,0.8)
	
	floor = VR.Geometry('floor')
	floor.setPrimitive('Box 30 0.2 10 30 1 10')
	floor.setFrom([0,-0.1,0])
	floor.setMaterial(blue)
	VR.scene.addChild(floor)
</core>
    </Script>
    <Script base_name="initPackets" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	brown = VR.Material('brown')
	brown.setDiffuse(0.8,0.5,0.1)
	
	belt = VR.ontology.process('q(b):ConveyorBelt(b)')[0]
	def addPacket(p):
		packet = VR.Geometry('packet')
		packet.setPrimitive('Box 0.3 0.2 0.3 1 1 1')
		packet.setFrom(p)
		packet.setMaterial(brown)
		VR.scene.addChild(packet)
		
		epacket = VR.ontology.addEntity('packet', 'Object')
		epacket.setVector('position', p)
		belt.add('load',epacket.getName())
		
	for i in range(10):
		addPacket([i*0.6-5,1.15,0])
		
</core>
    </Script>
    <Script base_name="initPanel" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	gray = VR.Material('blue')
	gray.setDiffuse(0.5,0.5,0.5)
	
	panel = VR.Geometry('panel')
	panel.setPrimitive('Box 0.2 2 1 1 1 1')
	panel.setFrom([3,1,3])
	panel.setMaterial(gray)
	VR.scene.addChild(panel)
	
	screen = VR.Sprite('panel')
	screen.setSize(0.9,0.9)
	screen.setTransform([0.11,0.5,0], [-1,0,0], [0,1,0])
	screen.webOpen('http://localhost:5500/pannel_site', 512,1.0)
	panel.addChild(screen)
</core>
    </Script>
    <Script base_name="initScanner" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	green = VR.Material('gray')
	green.setDiffuse(0.8,1.0,0.8)
	gray = VR.Material('gray')
	gray.setDiffuse(0.4,0.4,0.4)
	
	scanner = VR.CSGGeometry('OpticalScanner:scanner')
	outer = VR.Geometry('outer')
	inner = VR.Geometry('inner')
	outer.setPrimitive('Box 0.5 2 1.2 1 1 1')
	inner.setPrimitive('Box 0.6 1 1.1 1 1 1')
	inner.setFrom([0,0.2,0])
	scanner.addChild(outer)
	scanner.addChild(inner)
	scanner.setOperation('subtract')
	scanner.setEditMode(False)
	scanner.setFrom([3,1,0])
	scanner.setMaterial(gray)
	VR.scene.addChild(scanner)
	
	sensor = VR.Geometry('sensor')
	sensor.setPrimitive('Box 0.5 0.1 1.1 1 1 1')
	sensor.setFrom([0,0.65,0])
	sensor.setMaterial(green)
	scanner.addChild(sensor)
	
	lamp = VR.makeLamp()
	lamp.setFrom([0,1.1,0])
	scanner.addChild(lamp)
</core>
    </Script>
    <Script base_name="makeLamp" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	mred = VR.Material('red')
	mred.setDiffuse(1.0,0,0)
	mred.setLit(0)
	mgreen = VR.Material('green')
	mgreen.setDiffuse(0,0.5,0)
	
	
	lamp = VR.Transform('lamp')
	red = VR.Geometry('red')
	green = VR.Geometry('green')
	red.setPrimitive('Cylinder 0.1 0.1 12 1 1 1') 
	green.setPrimitive('Cylinder 0.1 0.1 12 1 1 1')
	red.setFrom([0,-0.05,0])
	green.setFrom([0,0.05,0])
	red.setMaterial(mred)
	green.setMaterial(mgreen)
	lamp.addChild(red)
	lamp.addChild(green)
	return lamp
</core>
    </Script>
    <Script base_name="pannel_handler" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	m = dev.getMessage().split(' ')
	print m
	
	def setLamp(lamp,l1,l2):
		if l1:
			lamp.getChild(0).getMaterial().setLit(True)
			lamp.getChild(0).getMaterial().setDiffuse(0.5,0,0)
			lamp.getChild(1).getMaterial().setLit(False)
			lamp.getChild(1).getMaterial().setDiffuse(0,1.0,0)
		else:
			lamp.getChild(0).getMaterial().setLit(False)
			lamp.getChild(0).getMaterial().setDiffuse(1.0,0,0)
			lamp.getChild(1).getMaterial().setLit(True)
			lamp.getChild(1).getMaterial().setDiffuse(0,0.5,0)
			
	
	if m[0] == 'power':
		lamps = VR.getRoot().findAll('lamp')
		if m[1] == 'true': 
			for lamp in lamps: setLamp(lamp,1,0)
		if m[1] == 'false': 
			for lamp in lamps: setLamp(lamp,0,1)
			
		devices = VR.ontology.process('q(d):ElectricalDevice(d)')
		for d in devices: d.set('powered',m[1])
	
	if m[0] == 'conveyor':
		if m[1] == 'true': pass
		if m[1] == 'false': pass
		
		belts = VR.ontology.process('q(b):ConveyorBelt(b);is(b.powered,true)')
		for b in belts: b.set('running',m[1])
		
		
	#print VR.ontology.toString()
</core>
      <trig type="on_device" dev="server1" state="Released" param="" key="-1" base_name="trigger" name_space="__global__" name_suffix="2" persistency="666"/>
    </Script>
    <Script base_name="pannel_site" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="HTML">
      <core>
&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
 &lt;style type="text/css"&gt;
  body {font-size:12vw;
		text-align:center;
		background:#ffffff;
		color:#555555}
  button {font-size:12vw;color:#555555;}
 &lt;/style&gt;
  &lt;script&gt;
	var websocket = new WebSocket('ws://localhost:5500');
	websocket.onopen = function() { msg('open'); };
	websocket.onerror = function(e) { msg('error'); };
	websocket.onmessage = function(m) { if(m.data) msg('msg: '+m.data); };
	websocket.onclose = function(e) { msg('closed with code '+e.code); };
	
	function send(m){ websocket.send(m); };
	function msg(m){ document.getElementById("msg").innerHTML += '&lt;br&gt;' + m; };
	
	var power = false;
	var conveyor = false;
	function toggle(tag, v) { v = !v; websocket.send(tag+' '+v); return v; };
 &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;


&lt;body&gt;
	&lt;br&gt;Control Panel:&lt;br&gt;&lt;br&gt;
	&lt;button onclick="power = toggle('power',power)"&gt;power&lt;/button&gt;&lt;br&gt;&lt;br&gt;
	&lt;button onclick="conveyor = toggle('conveyor',conveyor)"&gt;conveyor&lt;/button&gt;
&lt;/body&gt;

&lt;/html&gt;
</core>
    </Script>
    <Script base_name="semantics_init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	VR.ontology = VR.Ontology('SortingPlant')
	
	#VR.ontology.addModule('Math')
	#VR.ontology.addModule('Object')
	VR.ontology.addModule('Machine')
	
	cbelt = VR.ontology.addConcept('ConveyorBelt', 'Machine')
	cbelt.addProperty('speed', 'float')
	cbelt.addProperty('load', 'Object')
	
	change = VR.ontology.addConcept('Change')
	change.addProperty('timestamp', 'int')
	
	Schange = VR.ontology.addConcept('ScalarChange')
	Vchange = VR.ontology.addConcept('VectorChange')
	Schange.addProperty('value', 'float')
	Vchange.addProperty('value', 'Vector')
	
	VR.ontology.addRule('doTimestep(t):Machine(m);doWork(m,t)')
	VR.ontology.addRule('doWork(c,t):ConveyorBelt(c);Object(o);has(c,o);is(o.position,o.position+c.direction*c.speed)')
	
	ebelt = VR.ontology.addEntity('belt', 'ConveyorBelt')
	ebelt.set('running', 'false')		
	ebelt.set('powered', 'false')		
		
	print VR.ontology
</core>
    </Script>
    <Script base_name="semantics_update" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	#VR.ontology.process('q(c):Change(c);doTimestep(1)')
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="1000" key="0" base_name="trigger" name_space="__global__" name_suffix="3" persistency="666"/>
    </Script>
    <Script base_name="test" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	x = VR.ontology.process('q(x):float(x);is(x,1+1)')
	print x
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.185489 0.185489 0.185489" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
