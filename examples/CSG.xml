<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="CSG" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="Headlight" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1e+06 1e+06 1e+06 -1e+06 -1e+06 -1e+06 1" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="-0.0281699 0.0840961 0.170446" at_dir="0" base_name="Default" far="250" fov="1.0472" from="-0.751816 0.530903 2.05917" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="Headlight" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="click" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	# Ignore drag stuff, this is an ordinary click
	dev.intersect()
	i = dev.getIntersected()
	if not i: return
	
	if i.hasTag('sample'):
		d = i.duplicate()
		d.switchParent(VR.csgRoot)
		d.setPickable(True)
		m = VR.Material('obj')
		d.makeUnique()
		d.setMaterial(m)
		d.addTag('object')
		dev.drag(d)
		return
	
	if i.hasTag('menu'):
		VR.menus[i.getText()].execute()
		VR.selectedObjects = []
		return
		
	if i.isPickable():
		if VR.clickAction == "select":
			if not i.hasTag('sample') and not i in VR.selectedObjects: VR.cmdCsg('select', dev, '')
		if VR.clickAction == "switchEditMode": VR.cmdCsg('switch', dev, '')
		if VR.clickAction == "delete": VR.cmdCsg('del', dev, '')
		
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="5" persistency="666"/>
      <trig type="none" dev="flystick" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="6" persistency="666"/>
    </Script>
    <Script base_name="cmdCsg" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	intersected = None
	if dev: i = dev.getIntersected()
	
	def isCSG(o): return isinstance(o, VR.CSGGeometry)
	def toggleCSG(o): o.setEditMode(not o.getEditMode())
	
	if cmd == 'switch':	
		if isCSG(i): toggleCSG(i)
		elif isCSG(i.getParent()): toggleCSG(i.getParent())
	
	if cmd == 'select':
		if len(VR.selectedObjects) &lt; 2:
			VR.selectedObjects.append(i)
			mat = i.getMaterial()
			mat.setDiffuse(VR.colorSel[0],
				VR.colorSel[1],
				VR.colorSel[2])
		if len(VR.selectedObjects) == 2:
			VR.menus["CSG Menu"].show()
	
	if cmd == 'close':
		for obj in VR.selectedObjects:
			obj.getMaterial().setDiffuse(VR.colorNtl[0],
				VR.colorNtl[1],
				VR.colorNtl[2])
		del VR.selectedObjects[:]
		VR.selectedObjects = []
		
	if cmd == 'del':
		if i in VR.selectedObjects: VR.selectedObjects = []
		parent = i.getParent()
		i.destroy()
		if isCSG(parent) and len(parent.getChildren()) == 0:
			parent.destroy()
		
	if cmd == 'op':
		if len(VR.selectedObjects) != 2: raise Exception("Select 2 objects!")
	
		oldParents = []
		oldParents.append(VR.selectedObjects[0].getParent())
		oldParents.append(VR.selectedObjects[1].getParent())
		csg = VR.CSGGeometry(operation)
		csg.addChild(VR.selectedObjects[0])
		csg.addChild(VR.selectedObjects[1])
		csg.setOperation(operation)
		VR.csgRoot.addChild(csg)
		csg.setPickable(True)
		if not csg.setEditMode(False):
			# There was an error (probably from CGAL)
			msg = VR.MenuItem("Sorry, CGAL error!", None, True)
			msg.show()
		
			# clean up
			VR.selectedObjects[0].switchParent(oldParents[0])
			VR.selectedObjects[1].switchParent(oldParents[1])
			csg.destroy()
		VR.cmdCsg('close', None, '')
	
</core>
      <arg type="str" value="" base_name="cmd" name_space="cmdCsg" name_suffix="0" persistency="666"/>
      <arg type="VRPyDeviceType" value="0" base_name="dev" name_space="cmdCsg" name_suffix="0" persistency="666"/>
      <arg type="str" value="" base_name="operation" name_space="cmdCsg" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="createSample" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	sample = None
	
	if primitive == 'sphere':
		sample = VR.Geometry('sphere')
		sample.setPrimitive('Sphere 0.2 1')
	elif primitive == 'cube':
		sample = VR.Geometry('cube')
		sample.setPrimitive('Box 0.4 0.4 0.4 1 1 1')
		sample.setFrom([0.5, 0, 0])
	elif primitive == 'cylinder':
		sample = VR.Geometry('cylinder')
		sample.setPrimitive('Cylinder 0.2 0.2 16 1 1 1')
		sample.setFrom([1, 0, 0])
	elif primitive == 'torus':
		sample = VR.Geometry('torus')
		sample.setPrimitive('Torus 0.1 0.2 16 16')
		sample.setFrom([-0.6, 0, 0])
	else:
		print "Error: unknown primitive type:", primitive
		return None
	
	#sample.setPickable(True)
	sample.setMaterial(VR.Material("sample material"))
	sample.addTag('sample')
	VR.sampleRoot.addChild(sample)
	return sample

</core>
      <arg type="str" value="0" base_name="primitive" name_space="createSample" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="drawTree" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	# Performs Depth-first-search to reproduce the construction tree
	# using sprites for visualization.
	class TreeBuilder:
		"""
		Builds a sprite representation of the csg construction tree
		using depth-first search.
		"""
		spriteHeight = .3
		curY = -spriteHeight
	
		def buildTree(self, treeNode, constrNode, level):
			VR.spriteGeomMap = {}
		
			for child in constrNode.getChildren():
				sprite = VR.Sprite(child.getName())
				sprite.setMaterial(VR.Material('treesprite'))
				# Enable easy mapping from clicked sprite to geometry
				VR.spriteGeomMap[sprite] = child
			
				indentation = ""
				for i in xrange(level):
					indentation += "| "
				sprite.setText(indentation + child.getName())
				width = len(sprite.getText()) * 0.18 * self.spriteHeight
				sprite.setSize(width, self.spriteHeight)
				sprite.setFrom(-width/2.0, self.curY, 0)
				
				treeNode.addChild(sprite)
				at = sprite.getWorldFrom()
				sprite.setDir(0, 0, 1)
				self.curY -= self.spriteHeight
			
				if len(child.getChildren()) &gt; 0:
					self.buildTree(treeNode, child, level + 1)
	
	if not VR.treeRedrawEnabled:
		return
	
	# delete old tree
	if VR.visTree:
		VR.visTree.destroy()
		VR.visTree = None
	
	treeRoot = VR.Sprite("visual tree")
	treeRoot.setText("*")
	treeRoot.setSize(len(treeRoot.getText()) * .18 * .3, .3)
	treeRoot.setFrom(-1.9, 1.4, -3)
	#treeRoot.setFrom(0, 0, -3)
	treeRoot.setDir(0, 0, 1)
	tb = TreeBuilder()
	
	if VR.csgRoot:
		tb.buildTree(treeRoot, VR.csgRoot, 1)
		VR.visTree = treeRoot
		VR.camera.addChild(treeRoot)
	
</core>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	VR.treeRedrawEnabled = True
	VR.scaleEnabled = False
	VR.currentlyScaling = False
	VR.lastBeaconDir = (0,1,0)
	VR.visTree = None
	VR.lastDragged = None
	VR.colorSel = (1.0, 0.9, 0.2) # selected objects
	VR.colorNtl = (1.0, 1.0, 1.0) # "neutral" objects
	
	# needed for Flystick emulation
	VR.clickAction = "select"

	VR.root = root_1
	VR.camera = camera
	VR.csgRoot = csgRoot
	VR.sampleRoot = sampleRoot
	VR.initScene()
	VR.initMenu()

</core>
      <arg type="VRPyTransformType" value="Default" base_name="camera" name_space="init" name_suffix="0" persistency="666"/>
      <arg type="NoneType" value="csg root" base_name="csgRoot" name_space="init" name_suffix="0" persistency="666"/>
      <arg type="VRPyTransformType" value="Headlight" base_name="root" name_space="init" name_suffix="1" persistency="666"/>
      <arg type="NoneType" value="sample root" base_name="sampleRoot" name_space="init" name_suffix="0" persistency="666"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
    <Script base_name="initMenu" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	import math
	
	class MenuItem:
		"""
		Represents one menu item in a menu hierarchy.
		Manages it's own VR.Sprite.
		"""
	
		def __init__(self, txt, parent, isMenuRoot = False):
			"""
			txt: Menu item text label
			parent: Parent menu item (*not* scene graph parent!)
			isMenuRoot: determines if this item is the menu hierarchy's root
			TODO: don't take this explicitly, if we have a parent,
				we're not the menu root.
			"""
			self.sprite = VR.Sprite(txt)
			self.sprite.addTag('menu')
			self.sprite.setMaterial(VR.Material(txt))
			self.sprite.setText(txt)
			self.sprite.setSize(0.1 * len(txt), 0.2)
			self.sprite.hide()
			self.children = []
			self.menuOpen = False # Tells if our children are currently shown
			self.txt = txt
			self.parent = parent
			self.menuRoot = isMenuRoot
			
			VR.camera.addChild(self.sprite)
			if parent != None:
				parent.children.append(self)
			
			VR.menus[self.sprite.getText()] = self
		
		# Shows all our children (!) and ourselves
		def show(self):
			print self.sprite.getName(), "show"
			if VR.menuOpen:
				# Close any other open menu (just one at a time!)
				VR.menuOpen.hide()
			VR.menuOpen = self
			self.menuOpen = True
			
			self.sprite.show()
			if self.menuRoot: self.sprite.setFrom(VR.menuPos)
			else: self.sprite.setFrom(self.parent.sprite.getFrom())
			
			# TODO Caculate dir -&gt; cam
			self.sprite.setDir([0, 0, -1])
			scale = 0.2
			ref = self.sprite.getFrom()
			for i, c in enumerate(self.children):
				c.sprite.setFrom([ref[0], ref[1] - scale * (i+1), ref[2]])
				c.sprite.setDir([0, 0, -1])
				c.sprite.show()
		
		def hide(self):
			print self.sprite.getName(), "hide"
			VR.menuOpen = None
			self.menuOpen = False
			self.sprite.hide()
			for mItem in self.children:
				mItem.sprite.hide()
		
		def execute(self):
			if self.menuRoot:
				if self.menuOpen:
					self.hide()
			elif len(self.children) &gt; 0:
				if self.menuOpen:
					self.hide()
					self.parent.show()
				else:
					self.parent.hide()
					self.show()
			
			if self in VR.menuFuncs.keys():
				VR.menuFuncs[self]()
				VR.menuOpen.hide()
			
	# Make class MenuItem available in module VR
	VR.MenuItem = MenuItem		
	
	if hasattr(VR, 'menus'):
		for k, menuItem in VR.menus.items():
			menuItem.sprite.destroy()
		VR.menus.clear()
		VR.menuFuncs.clear()
	else:
		VR.menus = {}
		VR.menuFuncs = {}
	
	VR.menuPos = [0, 0, -1.5]
	VR.menuOpen = None
	
	mRoot = MenuItem('Menu', None, True)
	# Top menu layer
	mAxisLock = MenuItem('Axis Lock', mRoot)
	# Axis Lock children
	mOnlyX = MenuItem('X', mAxisLock)
	VR.menuFuncs[mOnlyX] = lambda: VR.cmdAxisLock('x')
	mOnlyY = MenuItem('Y', mAxisLock)
	VR.menuFuncs[mOnlyY] = lambda: VR.cmdAxisLock('y')
	mOnlyZ = MenuItem('Z', mAxisLock)
	VR.menuFuncs[mOnlyZ] = lambda: VR.cmdAxisLock('z')
	#mRoot.show()
	
	# Setup CSG op menu
	mRoot = MenuItem('CSG Menu', None, True)
	VR.menuFuncs[mRoot] = lambda: VR.cmdCsg('close', None, '')
	mUnite = MenuItem('Unite', mRoot)
	VR.menuFuncs[mUnite] = lambda: VR.cmdCsg('op', None, 'unite')
	mSubtract = MenuItem('Subtract', mRoot)
	VR.menuFuncs[mSubtract] = lambda: VR.cmdCsg('op', None, 'subtract')
	mIntersect = MenuItem('Intersect', mRoot)
	VR.menuFuncs[mIntersect] = lambda: VR.cmdCsg('op', None, 'intersect')
	
	# Setup mode sprite
	msgSpr = VR.Sprite("Mode")
	msgSpr.setMaterial(VR.Material('mode'))
	msgSpr.setText("select")
	msgSpr.setSize(0.1 * len("select"), 0.13)
	msgSpr.setFrom([0.5,0.5,-1])
	msgSpr.setDir([0,0,-1])
	VR.modeSpr = msgSpr
	VR.camera.addChild(msgSpr)
	
</core>
    </Script>
    <Script base_name="initScene" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	VR.selectedObjects = []
	
	if hasattr(VR, 'csgRoot') and VR.csgRoot: VR.csgRoot.destroy()
	VR.csgRoot = VR.Transform("csg root")
	VR.root.addChild(VR.csgRoot)
	
	if hasattr(VR, 'sampleRoot') and VR.sampleRoot: VR.sampleRoot.destroy()
	VR.sampleRoot = VR.Transform("sample root")
	VR.root.addChild(VR.sampleRoot)
	
	# place sample primitives
	sphere = VR.createSample("sphere")
	cube = VR.createSample("cube")
	cylinder = VR.createSample("cylinder")
	torus = VR.createSample("torus")
	
</core>
    </Script>
    <Script base_name="showNotification" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	if not msg:
		return
	
	import VR
	from threading import Timer
	
	def hideNotification():
		VR.notification.destroy()
	
	msgSpr = VR.Sprite("notification")
	msgSpr.setText(msg)
	msgSpr.setSize(0.2 * len(msg), 1)
	msgSpr.setFrom([0, 0, -3])
	at = VR.camera.getDir()
	msgSpr.setDir(at)
	VR.notification = msgSpr
	VR.camera.addChild(msgSpr)
	
	# When the timer finishes, PolyVR crashes reproducibly.
	#Timer(1.0, hideNotification).start()
	msgSpr.destroy()
	
</core>
      <arg type="str" value="0" base_name="msg" name_space="showNotification" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="toggleMultisampling" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	r = VR.getRendering()
	b = not r.getMultisampling()
	r.setMultisampling(b)
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="109" base_name="trigger" name_space="__global__" name_suffix="3" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.40322 0.40322 0.40322" format=".png" path="data/common/skybox/sky/Sky" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
