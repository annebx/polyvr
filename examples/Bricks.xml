<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Bricks" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="Headlight" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1e+06 1e+06 1e+06 -1e+06 -1e+06 -1e+06 1" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="17.8036 24.3013 2.10903" at_dir="0" base_name="Default" far="250" fov="1.0472" from="23.692 24.7957 2.55006" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="Headlight" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <attachments>
              <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
            </attachments>
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="addBrick" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if not hasattr(VR, 'bmat'):
		VR.bmat = VR.Material('bricks')
		VR.bmat.setDiffuse(0,0.5,1)
		VR.bmat.setVertexProgram('shdr_v')
		VR.bmat.setFragmentProgram('shdr_f')
		
	if not hasattr(VR, 'kit'):
		VR.kit = VR.ConstructionKit()
		VR.a1_ID = VR.kit.addAnchorType(s*0.1, [1,1,1])	
	
	# create brick
	g = VR.Geometry('brick')
	g.setPrimitive('Box '+str(X)+' '+str(Y)+' '+str(Z)+' 1 1 1')
	g.setMaterial(VR.bmat)
	g.setPickable(1)
	VR.find('Headlight').addChild(g)
	
	# add brick anchor points
	h = Y*0.5
	VR.kit.addObject(g)

	for i in range(int(X/s)):
		for j in range(int(Z/s)):
			x = i*s - X*0.5 +0.5*s
			y = j*s - Z*0.5 +0.5*s
			R = s*0.3
			#VR.kit.getSnappingEngine().addRule('POINT', 'POINT', VR.Pose(), VR.Pose(), R, 0, g)
			#VR.kit.getSnappingEngine().addRule('POINT', 'POINT', VR.Pose(), VR.Pose(), R, 0, g)
			VR.kit.addObjectAnchor(g, VR.a1_ID, [x,h,y], s*0.3)
			VR.kit.addObjectAnchor(g, VR.a1_ID, [x,-h,y], s*0.3)
			
	# drag new brick
	idev = VR.find('mouse')
	if VR.find('flystick'): idev = VR.find('flystick')
	idev.drag(g)
	idev.getDragGhost().setFrom([0,0,-0.5])
</core>
      <arg type="float" value="1" base_name="X" name_space="addBrick" name_suffix="0" persistency="666"/>
      <arg type="float" value="1" base_name="Y" name_space="addBrick" name_suffix="0" persistency="666"/>
      <arg type="float" value="1" base_name="Z" name_space="addBrick" name_suffix="0" persistency="666"/>
      <arg type="float" value="0.1" base_name="s" name_space="addBrick" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="gui" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="HTML">
      <core>
&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
 &lt;style type="text/css"&gt;
  body {text-align:center;
		background:#f0f0ff;
		color:#111166;
		margin:0;}
		input[type=number]::-webkit-inner-spin-button {
		  cursor: pointer;
		  display: block;
		  width: 60px;
		  text-align: center;
		  position: relative;
		  background: transparent;
		}
 &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
		 &lt;script&gt;
			function get(b,s,m) {
				var xmlHttp = new XMLHttpRequest();
				var uri = document.URL+'?button='+b+'&amp;state='+s+'&amp;message='+m;
				xmlHttp.open( "GET", uri, true );
				xmlHttp.send( null );
			}
		 &lt;/script&gt;
 
 		&lt;script src="three.min.js"&gt;&lt;/script&gt;
		&lt;script src="TrackballControls.js"&gt;&lt;/script&gt;
		
		&lt;script type="x-shader/x-vertex" id="vertexShader"&gt;
		varying vec3 norm;
		varying vec3 pos;
		void main() {
		    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
		    norm = normal;
		    pos = position + abs(position);
		}
		&lt;/script&gt;

		&lt;script type="x-shader/x-fragment" id="fragmentShader"&gt;	
		varying vec3 norm;
		varying vec3 pos;
		void main() {
			vec3 t = abs(abs(norm.xyz)-1.0);
		    
		    vec3 Pos = pos; 
		    Pos.y *= 3.0/1.2;
		    highp ivec3 i = ivec3(abs(Pos.xyz));
		    vec3 D = abs(Pos.xyz)-vec3(i);
		    D = abs(0.5-D.xyz)*t.xyz;
		    vec3 col = vec3(0.0, 0.7, 1.0);
		    if (length(D) &lt; 0.4) 
				col = vec3(0.7, 0.9, 1.0);
				
		    vec3 l = vec3(0.7, 1.0, 0.4);
		    l = normalize(l);
		    gl_FragColor = vec4(col * max(0.0, dot(norm, l)), 1.0);
		}
		&lt;/script&gt;

		&lt;script&gt;
			var camera, scene, renderer, mesh, geo;
			var width = 200;
			var height = 200;
			var bX = 4;
			var bY = 3;
			var bZ = 2;

			function onWindowResize() {
				camera.aspect = width/height;
				camera.updateProjectionMatrix();
				renderer.setSize( width, height );
			}

			function animate() {
				requestAnimationFrame( animate );
				controls.update();
			}
			
			function render() {
				renderer.render( scene, camera );
			}

			init();
			animate();
			render();
			
			function brickMaterial() {
				/*var texture = THREE.ImageUtils.loadTexture( 'CaveKeeper.png' );
				texture.anisotropy = renderer.getMaxAnisotropy();
				return new THREE.MeshBasicMaterial( { map: texture } );*/
				
				return new THREE.ShaderMaterial( { 
					uniforms: { radius: { type: "f", value: 0.8 } }, 
					vertexShader: document.getElementById( 'vertexShader' ).textContent, 
					fragmentShader: document.getElementById( 'fragmentShader' ).textContent } );
			}

			function init() {
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( width, height );
				renderer.setClearColor( 0xf0f0ff, 1);
				document.body.appendChild( renderer.domElement );

				camera = new THREE.PerspectiveCamera( 70, width/height, 1, 1000 );
				camera.position.set(3,3,3);
				scene = new THREE.Scene();
				geo = new THREE.BoxGeometry( bX, bY*1.2/3, bZ );
				mesh = new THREE.Mesh( geo, brickMaterial() );
				scene.add( mesh );
				
				controls = new THREE.TrackballControls( camera, renderer.domElement );
				controls.target.set( 0, 0, 0 )
				controls.rotateSpeed = 2.0;
				controls.zoomSpeed = 1.2;
				controls.panSpeed = 0.8;
				controls.noZoom = true;
				controls.noPan = true;
				controls.staticMoving = true;
				controls.dynamicDampingFactor = 0.3;
				controls.addEventListener( 'change', render );

				window.addEventListener( 'resize', onWindowResize, false );
			}
			
			function dims() {
				return bX+"_"+bY*1.2/3+"_"+bZ;
			}
			
			function brick(i,v) {
				if (i == 1) bX = v;
				if (i == 2) bY = v;
				if (i == 3) bZ = v;
				mesh.geometry = new THREE.BoxGeometry( bX, bY*1.2/3, bZ );
				render();
			}
		&lt;/script&gt;

&lt;input style="height:45px;width:35px;" type="number" onchange="brick(1,this.value)" min="1" max="4" value="4"&gt;
&lt;input style="height:45px;width:35px;" type="number" onchange="brick(2,this.value)" min="1" max="3" value="3"&gt;
&lt;input style="height:45px;width:35px;" type="number" onchange="brick(3,this.value)" min="1" max="4" value="2"&gt;
&lt;button onmousedown='get(1,1,dims())' onmouseup='get(1,0,dims())'&gt;Create&lt;/button&gt;


&lt;/body&gt;&lt;/html&gt;
</core>
    </Script>
    <Script base_name="handler" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	s = 0.1
	
	k = dev.getKey()
	m = dev.getMessage()
	
	# new brick
	if k == 1:
		dims = m.split('_')
		VR.addBrick(float(dims[0])*s, float(dims[1])*s, float(dims[2])*s, s)
		
		
</core>
      <arg type="VRPyDeviceType" value="flystick" base_name="flystick" name_space="handler" name_suffix="0" persistency="666"/>
      <arg type="VRPyDeviceType" value="mouse" base_name="mouse" name_space="handler" name_suffix="0" persistency="666"/>
      <trig type="on_device" dev="server1" state="Released" param="" key="-1" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	gui = VR.Sprite('gui')
	gui.setSize(0.5, 0.65)
	gui.webOpen('http://localhost:5500/gui', 200, 0.769)
	gui.setFrom([-0.5,0,-1])
	
	cam = VR.find('Default')
	cam.addChild(gui)
	
</core>
      <arg type="VRPyDeviceType" value="flystick" base_name="flystick" name_space="init" name_suffix="0" persistency="666"/>
      <arg type="VRPyDeviceType" value="keyboard" base_name="keyboard" name_space="init" name_suffix="0" persistency="666"/>
      <arg type="VRPyDeviceType" value="mouse" base_name="mouse" name_space="init" name_suffix="0" persistency="666"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="kit_break" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	dev.intersect()
	i = dev.getIntersected()
	VR.kit.breakup(i)
	dev.drag(i)
	
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="2" base_name="trigger" name_space="__global__" name_suffix="2" persistency="666"/>
      <trig type="on_device" dev="flystick" state="Pressed" param="" key="3" base_name="trigger" name_space="__global__" name_suffix="3" persistency="666"/>
    </Script>
    <Script base_name="shdr_f" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
varying vec3 norm;
varying vec3 pos;
varying vec3 light;
void main() {
	vec3 t = abs(abs(norm.xyz)-1.0);
    
    vec3 Pos = pos; 
    Pos.y *= 3.0/1.2;
    ivec3 i = ivec3(abs(Pos.xyz));
    vec3 D = abs(Pos.xyz)-vec3(i);
    D = abs(0.5-D.xyz)*t.xyz;
    vec3 col = vec3(0.0, 0.7, 1.0);
    if (length(D) &lt; 0.4) 
		col = vec3(0.7, 0.9, 1.0);
		
    //gl_FragColor = vec4(col * max(0.0, dot(norm, light)), 1.0);
    gl_FragColor = vec4(col * abs(dot(norm, light)), 1.0);
}
</core>
    </Script>
    <Script base_name="shdr_v" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
varying vec3 norm;
varying vec3 pos;
varying vec3 light;

attribute vec4 osg_Vertex;
attribute vec3 osg_Normal;

void main() {
    gl_Position = gl_ModelViewProjectionMatrix * osg_Vertex;
    norm = osg_Normal;
    pos = 10.0*(osg_Vertex+abs(osg_Vertex)).xyz;
    
    &#13;
    light = gl_LightSource[0].position.xyz - gl_Position.xyz;
    light = vec3(0.5, 1.0, -0.7);
    light = normalize(light);
}
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="FlyWalk" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
