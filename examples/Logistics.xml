<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Logistics" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="Headlight" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1e+06 1e+06 1e+06 -1e+06 -1e+06 -1e+06 1" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="8.28557 0 1.48012" at_dir="0" base_name="Default" far="250" fov="1.0472" from="0.10079 8.91245 -12.2431" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="Headlight" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <attachments>
              <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
            </attachments>
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'Headlight')
	
	VR.initMaterials()
	VR.initScene()
	VR.initLogistics()
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="7" persistency="666"/>
    </Script>
    <Script base_name="initLogistics" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	capacity = 100
	speed = 0.5
	
	VR.log = VR.Factory.Logistics()
	VR.lnet = VR.log.addNetwork()
	
	VR.ptool = VR.Pathtool()
	VR.ptool.getPathMaterial().setDiffuse([0,1,0])
	VR.scene.addChild(VR.ptool)
	
	
	n11 = VR.lnet.addNode(VR.Pose([8, 1, 1]))
	n12 = VR.lnet.addNode(VR.Pose([7, 1, 3], [-1,0,0]))
	n13 = VR.lnet.addNode(VR.Pose([4, 1, 3], [-1,0,0]))
	n14 = VR.lnet.addNode(VR.Pose([4, 3, 5]))
			
	n21 = VR.lnet.addNode(VR.Pose([8, 1, -1]))
	n22 = VR.lnet.addNode(VR.Pose([6, 1, -2], [-1,0,0]))
	n23 = VR.lnet.addNode(VR.Pose([4, 1, -2], [-1,0,0]))
	n24 = VR.lnet.addNode(VR.Pose([4, 0.3, -3]))
	
	n31 = VR.lnet.addNode(VR.Pose([7, 1, -6]))
	n32 = VR.lnet.addNode(VR.Pose([6, 1, -6], [-1,0,0]))
	n33 = VR.lnet.addNode(VR.Pose([5, 2, -6], [-1,0,0]))
	n34 = VR.lnet.addNode(VR.Pose([3, 2, -6], [-1,0,0]))
	n35 = VR.lnet.addNode(VR.Pose([2, 1, -6], [-1,0,0]))
	n36 = VR.lnet.addNode(VR.Pose([1, 1, -8], [-1,0,0]))
	n37 = VR.lnet.addNode(VR.Pose([0, 1, -8], [-1,0,0]))
	n38 = VR.lnet.addNode(VR.Pose([-1, 1, -4], [0,0,1]))
	n39 = VR.lnet.addNode(VR.Pose([-2, 2, -3], [-1,0,0]))
	n310 = VR.lnet.addNode(VR.Pose([-3, 2, -3], [-1,0,0]))
	
	def connect(nodes):
		for n1, n2 in zip(nodes[:-1], nodes[1:]):
			VR.lnet.connect(n1, n2)
	
	connect([n11, n12, n13, n14])
	connect([n21, n22, n23, n24])
	connect([n31, n32, n33, n34, n35, n36, n37, n38, n39, n310])
	
	VR.ptool.setGraph(VR.lnet.getGraph())
	VR.ptool.update()
	
	# TODO: set node transform with pathtool handles!
	# TODO: fix all bugs
	
	
	# ------------ logistics -------------
	
	route1 = VR.log.computeRoute(n11, n14)
	route2 = VR.log.computeRoute(n21, n24)
	route3 = VR.log.computeRoute(n31, n310)
	
	VR.log_containers = []
	for route in [route1, route2, route3]:	
		c0 = VR.log.addContainer(VR.cardbox)
		c0.setCapacity(capacity)
		c1 = VR.log.addContainer(VR.cardbox)
		c1.setCapacity(capacity)
		VR.lnet.getNode(route.first()).set(c0)
		VR.lnet.getNode(route.last() ).set(c1)
		VR.log_containers.append([c0,c1])
		VR.log.fillContainer(c0, capacity, VR.product)
	
		# set transporters
		t = VR.log.addTransporter('Product')
		t.setPath(route)
		t.setSpeed(speed)
</core>
    </Script>
    <Script base_name="initMaterials" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	# bricks
	VR.mat_bricks = VR.Material('bricks')
	tg = VR.TextureGenerator()
	tg.setSize([50,50,50])
	cp = 0.95
	tg.add('Perlin', 1, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/4, [cp,cp,cp], [1,1,1])
	tg.add('Bricks', 1, [0.4,0.4,0.4], [1,1,1])
	VR.mat_bricks.setTexture(tg.compose(0))
	
	# cardboard
	VR.mat_cardboard = VR.Material('cardboard')
	tg = VR.TextureGenerator()
	tg.setSize([50,50,50])
	tg.add('Perlin', 1, [0.5,0.3,0.1], [0.6,0.4,0.1])
	tg.add('Perlin', 1.0/4, [0.5,0.3,0.1], [0.7,0.6,0.2])
	VR.mat_cardboard.setTexture(tg.compose(0))
	
	# metal
	def setMetalic(mat, a,d,sp,sh):
		mat.setDiffuse([d,d,d])
		mat.setSpecular([sp,sp,sp])
		mat.setAmbient([a,a,a])
		mat.setShininess(128*sh)	
	
	VR.mat_metal = VR.Material('metal')
	setMetalic(VR.mat_metal, 0.25, 0.4, 0.77, 0.6)
	tg = VR.TextureGenerator()
	tg.setSize([50,50,50])
	cp = 0.6
	tg.add('Perlin', 1.0/2, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/8, [cp,cp,cp], [1,1,1])
	VR.mat_metal.setTexture(tg.compose(0))
	
	VR.mat_metal.addPass()
	setMetalic(VR.mat_metal, 0.25, 0.9, 1, 0.6)
	VR.mat_metal.setTexture(tg.compose(1))
	VR.mat_metal.setTextureType('SphereEnv')
	VR.mat_metal.setTransparency(0.4)
		
	
	
	
</core>
    </Script>
    <Script base_name="initScene" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	# geometries
	def makeObject(name, params, pose):
		obj = VR.Geometry(name)
		obj.setPose(pose)
		obj.setPrimitive(params)
		VR.scene.addChild(obj)
		return obj
		
	floor = makeObject('floor', 'Plane 20 20 20 20', VR.Pose([0,0,0], [0,1,0], [1,0,0]))
	floor.setMaterial(VR.mat_bricks)
	floor.setTexCoords(floor.getPositions())
	
	VR.cardbox = makeObject('floor', 'Box 1 1 1 1', VR.Pose([0,0,0], [0,0,-1], [0,1,0]))
	VR.cardbox.setMaterial(VR.mat_cardboard)
	VR.cardbox.hide()
	
	t1 = makeObject('t1', 'Box 0.15 0.05 0.3 1 1 1', VR.Pose([0,0,0], [0,0,-1], [0,1,0]))
	t2 = makeObject('t2', 'Box 0.12 0.1 0.2 1 1 1', VR.Pose([0,0.05,0.02], [0,0,-1], [0,1,0]))
	VR.product = VR.CSGGeometry('product')
	VR.product.addChild(t1)
	VR.product.addChild(t2)
	VR.product.setOperation('subtract')
	VR.scene.addChild(VR.product)
	VR.product.setEditMode(0)
	VR.product.setMaterial(VR.mat_metal)
	VR.product.setTexCoords(VR.product.getPositions())
	VR.product.hide()
		
</core>
    </Script>
    <Script base_name="logistics_update" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if hasattr(VR, 'log'):
		VR.log.update()
		
		for c in VR.log_containers:
			if c[0].isEmpty():
				VR.log.fillContainer(c[0], c[0].getCapacity(), VR.product)
			if c[1].isFull():
				c[1].clear()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="50" key="0" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
